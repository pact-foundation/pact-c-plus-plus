<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacepact__consumer_1_1matchers" kind="namespace" language="C++">
    <compoundname>pact_consumer::matchers</compoundname>
    <innerclass refid="classpact__consumer_1_1matchers_1_1IMatcher" prot="public">pact_consumer::matchers::IMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1ObjectMatcher" prot="public">pact_consumer::matchers::ObjectMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1IntegerMatcher" prot="public">pact_consumer::matchers::IntegerMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1DecimalMatcher" prot="public">pact_consumer::matchers::DecimalMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1TypeMatcher" prot="public">pact_consumer::matchers::TypeMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1NumberMatcher" prot="public">pact_consumer::matchers::NumberMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1EqualsMatcher" prot="public">pact_consumer::matchers::EqualsMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1DateTimeMatcher" prot="public">pact_consumer::matchers::DateTimeMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1DateMatcher" prot="public">pact_consumer::matchers::DateMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1TimeMatcher" prot="public">pact_consumer::matchers::TimeMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1RegexMatcher" prot="public">pact_consumer::matchers::RegexMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1EachlikeMatcher" prot="public">pact_consumer::matchers::EachlikeMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1ArrayContainsMatcher" prot="public">pact_consumer::matchers::ArrayContainsMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1HexadecimalMatcher" prot="public">pact_consumer::matchers::HexadecimalMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1IPAddressMatcher" prot="public">pact_consumer::matchers::IPAddressMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1UuidMatcher" prot="public">pact_consumer::matchers::UuidMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1IncludesMatcher" prot="public">pact_consumer::matchers::IncludesMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1NullMatcher" prot="public">pact_consumer::matchers::NullMatcher</innerclass>
    <innerclass refid="classpact__consumer_1_1matchers_1_1UrlMatcher" prot="public">pact_consumer::matchers::UrlMatcher</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a75bcf07c65576f27643f4d21a1f45881" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Object</definition>
        <argsstring>(const std::unordered_map&lt; std::string, IMatcher::Ptr &gt; &amp;fields)</argsstring>
        <name>Object</name>
        <param>
          <type>const std::unordered_map&lt; std::string, <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref> &gt; &amp;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents a JSON object (map of string fields) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="10" column="17" bodyfile="src/matchers.cpp" bodystart="10" bodyend="12" declfile="include/matchers.h" declline="230" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a4857b8996e54c5dc7e8cb5a814d595dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Integer</definition>
        <argsstring>(long value)</argsstring>
        <name>Integer</name>
        <param>
          <type>long</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matchers an integer value (must be a number and have no decimal places). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="14" column="17" bodyfile="src/matchers.cpp" bodystart="14" bodyend="16" declfile="include/matchers.h" declline="235" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1ab3eba43ca56c78c36b3dda251a0e1faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Integer</definition>
        <argsstring>(int value)</argsstring>
        <name>Integer</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matchers an integer value (must be a number and have no decimal places). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="18" column="17" bodyfile="src/matchers.cpp" bodystart="18" bodyend="20" declfile="include/matchers.h" declline="240" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1aa97242d2caf82ab8b512686962c9945e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Integer</definition>
        <argsstring>()</argsstring>
        <name>Integer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matchers an integer value (must be a number and have no decimal places). A random example value will be generated. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="22" column="17" bodyfile="src/matchers.cpp" bodystart="22" bodyend="24" declfile="include/matchers.h" declline="245" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a3d266fa3fc12cec88e0a23a50ba4219d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Like</definition>
        <argsstring>(long value)</argsstring>
        <name>Like</name>
        <param>
          <type>long</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matchers value based on the value type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="26" column="17" bodyfile="src/matchers.cpp" bodystart="26" bodyend="28" declfile="include/matchers.h" declline="250" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a83ea48364b267e159a6e82802bd8300c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Like</definition>
        <argsstring>(int value)</argsstring>
        <name>Like</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matchers value based on the value type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="30" column="17" bodyfile="src/matchers.cpp" bodystart="30" bodyend="32" declfile="include/matchers.h" declline="254" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a6ec3cd8bb6b06b62522886ff2c73d256" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Like</definition>
        <argsstring>(double value)</argsstring>
        <name>Like</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matchers value based on the value type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="34" column="17" bodyfile="src/matchers.cpp" bodystart="34" bodyend="36" declfile="include/matchers.h" declline="258" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a0e7fe8ef25809bc7971c552636ec2057" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Like</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>Like</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matchers value based on the value type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="38" column="17" bodyfile="src/matchers.cpp" bodystart="38" bodyend="40" declfile="include/matchers.h" declline="262" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1aa07b63501393ef2a1ee4458f6558d8a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Like</definition>
        <argsstring>(const char *value)</argsstring>
        <name>Like</name>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matchers value based on the value type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="42" column="17" bodyfile="src/matchers.cpp" bodystart="42" bodyend="44" declfile="include/matchers.h" declline="266" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a6dd0effb347f57ad878e230082e1c546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Like</definition>
        <argsstring>(bool value)</argsstring>
        <name>Like</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matchers value based on the value type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="46" column="17" bodyfile="src/matchers.cpp" bodystart="46" bodyend="48" declfile="include/matchers.h" declline="270" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a85517d3c436fab9ebfcf64f83b2228e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::DateTime</definition>
        <argsstring>(const std::string &amp;format, const std::string &amp;example)</argsstring>
        <name>DateTime</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String value that must match the provided datetime format string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Datetime format string. See <ulink url="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html">Java SimpleDateFormat</ulink> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>example</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="50" column="17" bodyfile="src/matchers.cpp" bodystart="50" bodyend="52" declfile="include/matchers.h" declline="277" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1aa7dd31a9908dd2d3f0537d22c7f00fdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::DateTime</definition>
        <argsstring>(const std::string &amp;format)</argsstring>
        <name>DateTime</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String value that must match the provided datetime format string. Example values will be generated using the current system date and time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Datetime format string. See <ulink url="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html">Java SimpleDateFormat</ulink> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="54" column="17" bodyfile="src/matchers.cpp" bodystart="54" bodyend="56" declfile="include/matchers.h" declline="283" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a1dc23cb6b8e020bcc3e85499841994ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Date</definition>
        <argsstring>(const std::string &amp;format, const std::string &amp;example)</argsstring>
        <name>Date</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String value that must match the provided date format string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Datetime format string. See <ulink url="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html">Java SimpleDateFormat</ulink> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>example</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="58" column="17" bodyfile="src/matchers.cpp" bodystart="58" bodyend="60" declfile="include/matchers.h" declline="290" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1ab73e9cc53a6337357ddc8feb0772410d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Date</definition>
        <argsstring>(const std::string &amp;format)</argsstring>
        <name>Date</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String value that must match the provided date format string. Example values will be generated using the current system date and time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Datetime format string. See <ulink url="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html">Java SimpleDateFormat</ulink> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="62" column="17" bodyfile="src/matchers.cpp" bodystart="62" bodyend="64" declfile="include/matchers.h" declline="296" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a4ee7077e9e16c8efdadf0876d9020041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Time</definition>
        <argsstring>(const std::string &amp;format, const std::string &amp;example)</argsstring>
        <name>Time</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String value that must match the provided time format string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Datetime format string. See <ulink url="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html">Java SimpleDateFormat</ulink> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>example</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="66" column="17" bodyfile="src/matchers.cpp" bodystart="66" bodyend="68" declfile="include/matchers.h" declline="303" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1aaa158ac8c4fe42b3c120453dbdc33020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Time</definition>
        <argsstring>(const std::string &amp;format)</argsstring>
        <name>Time</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String value that must match the provided time format string. Example values will be generated using the current system date and time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Datetime format string. See <ulink url="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html">Java SimpleDateFormat</ulink> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="70" column="17" bodyfile="src/matchers.cpp" bodystart="70" bodyend="72" declfile="include/matchers.h" declline="309" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1ab7dd9cd96c833d67693ed621d7951442" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Matching</definition>
        <argsstring>(const std::string &amp;regex, const std::string &amp;example)</argsstring>
        <name>Matching</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>regex</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String value that must match the regular expression </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="74" column="17" bodyfile="src/matchers.cpp" bodystart="74" bodyend="76" declfile="include/matchers.h" declline="314" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a11e3831cfbeb4fa8a11b706fbbb6677f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Matching</definition>
        <argsstring>(const std::string &amp;regex)</argsstring>
        <name>Matching</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>regex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String value that must match the regular expression. Random values will be generated for the examples. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="78" column="17" bodyfile="src/matchers.cpp" bodystart="78" bodyend="80" declfile="include/matchers.h" declline="319" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a373d5b4e09f56d4245ecafe400044bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::EachLike</definition>
        <argsstring>(const IMatcher::Ptr obj)</argsstring>
        <name>EachLike</name>
        <param>
          <type>const <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array of values where each item in the array must match the provided template. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="82" column="17" bodyfile="src/matchers.cpp" bodystart="82" bodyend="84" declfile="include/matchers.h" declline="324" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a301d266f66d722e7a76bc8301c211991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::EachLike</definition>
        <argsstring>(int examples, const IMatcher::Ptr obj)</argsstring>
        <name>EachLike</name>
        <param>
          <type>int</type>
          <declname>examples</declname>
        </param>
        <param>
          <type>const <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array of values where each item in the array must match the provided template. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>examples</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of example values to generate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="86" column="17" bodyfile="src/matchers.cpp" bodystart="86" bodyend="88" declfile="include/matchers.h" declline="330" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a25f4cc8d8a3afadfd5b4c5245746ebc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::AtLeastOneLike</definition>
        <argsstring>(const IMatcher::Ptr obj)</argsstring>
        <name>AtLeastOneLike</name>
        <param>
          <type>const <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array of values that must have at least one value and each item in the array must match the provided template. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="90" column="17" bodyfile="src/matchers.cpp" bodystart="90" bodyend="92" declfile="include/matchers.h" declline="335" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a8f530d7b5f9122e1c6b137f1e3f62858" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::AtLeastOneLike</definition>
        <argsstring>(int examples, const IMatcher::Ptr obj)</argsstring>
        <name>AtLeastOneLike</name>
        <param>
          <type>int</type>
          <declname>examples</declname>
        </param>
        <param>
          <type>const <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array of values that must have at least one value and each item in the array must match the provided template. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>examples</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of example values to generate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="94" column="17" bodyfile="src/matchers.cpp" bodystart="94" bodyend="96" declfile="include/matchers.h" declline="341" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a6097e61920812f2a75d708569c1605e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::HexValue</definition>
        <argsstring>(const std::string &amp;example)</argsstring>
        <name>HexValue</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a hexadecimal value <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>example</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="98" column="17" bodyfile="src/matchers.cpp" bodystart="98" bodyend="100" declfile="include/matchers.h" declline="347" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a627f4d81bff337fe7b7fb87b7ae35414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::HexValue</definition>
        <argsstring>()</argsstring>
        <name>HexValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a hexadecimal value. Random examples will be generated. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="102" column="17" bodyfile="src/matchers.cpp" bodystart="102" bodyend="104" declfile="include/matchers.h" declline="352" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1af78b59b345716d7f9958ac5688657022" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::IPAddress</definition>
        <argsstring>(const std::string &amp;example)</argsstring>
        <name>IPAddress</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match an IP Address <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>example</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="106" column="17" bodyfile="src/matchers.cpp" bodystart="106" bodyend="108" declfile="include/matchers.h" declline="358" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a2a07a602dd54b0ce820af22484987bf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::IPAddress</definition>
        <argsstring>()</argsstring>
        <name>IPAddress</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match an IP Address. Will use 127.0.0.1 for examples. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="110" column="17" bodyfile="src/matchers.cpp" bodystart="110" bodyend="112" declfile="include/matchers.h" declline="363" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a5b09c8fb2e37ca8c610bb3df63b65bb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Numeric</definition>
        <argsstring>(int example)</argsstring>
        <name>Numeric</name>
        <param>
          <type>int</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a numeric value. This will match any numeric type (integer or floating point). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="114" column="17" bodyfile="src/matchers.cpp" bodystart="114" bodyend="116" declfile="include/matchers.h" declline="369" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a02ab80cff207fe8f808e738e4085e00c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Numeric</definition>
        <argsstring>(long example)</argsstring>
        <name>Numeric</name>
        <param>
          <type>long</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a numeric value. This will match any numeric type (integer or floating point). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="118" column="17" bodyfile="src/matchers.cpp" bodystart="118" bodyend="120" declfile="include/matchers.h" declline="375" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a492350f247cc0ffe0651f5c6327e92b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Numeric</definition>
        <argsstring>(float example)</argsstring>
        <name>Numeric</name>
        <param>
          <type>float</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a numeric value. This will match any numeric type (integer or floating point). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="122" column="17" bodyfile="src/matchers.cpp" bodystart="122" bodyend="124" declfile="include/matchers.h" declline="381" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a346d30c12586a914b26dd3ca2c9bd879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Numeric</definition>
        <argsstring>(double example)</argsstring>
        <name>Numeric</name>
        <param>
          <type>double</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a numeric value. This will match any numeric type (integer or floating point). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="126" column="17" bodyfile="src/matchers.cpp" bodystart="126" bodyend="128" declfile="include/matchers.h" declline="387" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1af805123c41e4789af759efa739772286" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Numeric</definition>
        <argsstring>()</argsstring>
        <name>Numeric</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a numeric value. Random decimal values will be generated for examples. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="130" column="17" bodyfile="src/matchers.cpp" bodystart="130" bodyend="132" declfile="include/matchers.h" declline="392" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1afcc8d7fa449dc781049af11353f63680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Decimal</definition>
        <argsstring>(float example)</argsstring>
        <name>Decimal</name>
        <param>
          <type>float</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a decimal value (number with atleast one digit after the decimal point) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>example</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="134" column="17" bodyfile="src/matchers.cpp" bodystart="134" bodyend="136" declfile="include/matchers.h" declline="398" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a0033957c079590c59da96e95f2f89b9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Decimal</definition>
        <argsstring>(double example)</argsstring>
        <name>Decimal</name>
        <param>
          <type>double</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a decimal value (number with atleast one digit after the decimal point) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>example</parametername>
</parameternamelist>
<parameterdescription>
<para>Example value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="138" column="17" bodyfile="src/matchers.cpp" bodystart="138" bodyend="140" declfile="include/matchers.h" declline="404" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a9b2546fe1ad56f3434e7028a3499bfd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Decimal</definition>
        <argsstring>()</argsstring>
        <name>Decimal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a decimal value (number with atleast one digit after the decimal point). Random values will be generated for examples. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="142" column="17" bodyfile="src/matchers.cpp" bodystart="142" bodyend="144" declfile="include/matchers.h" declline="410" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a1665b020f1998e12d2e3b06edf59037b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Uuid</definition>
        <argsstring>(const std::string &amp;example)</argsstring>
        <name>Uuid</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>example</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a universally unique identifier (UUID) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>example</parametername>
</parameternamelist>
<parameterdescription>
<para>value to use for examples </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="146" column="17" bodyfile="src/matchers.cpp" bodystart="146" bodyend="148" declfile="include/matchers.h" declline="416" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1aab0a2b88f2fd1bb46fe26e5642d61c1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Uuid</definition>
        <argsstring>()</argsstring>
        <name>Uuid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match a universally unique identifier (UUID). Random values will be used for examples. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="150" column="17" bodyfile="src/matchers.cpp" bodystart="150" bodyend="152" declfile="include/matchers.h" declline="421" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a8ad798ea440fcad6ee7f0d6877880cd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::AtMostLike</definition>
        <argsstring>(int max, const IMatcher::Ptr obj)</argsstring>
        <name>AtMostLike</name>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <param>
          <type>const <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array with maximum size and each element like the template object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum size of the array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="154" column="17" bodyfile="src/matchers.cpp" bodystart="154" bodyend="156" declfile="include/matchers.h" declline="427" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1acf9636daddf7702ee686dbc3768f73ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::AtMostLike</definition>
        <argsstring>(int max, int examples, const IMatcher::Ptr obj)</argsstring>
        <name>AtMostLike</name>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <param>
          <type>int</type>
          <declname>examples</declname>
        </param>
        <param>
          <type>const <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array with maximum size and each element like the template object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum size of the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>examples</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of examples to generate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="158" column="17" bodyfile="src/matchers.cpp" bodystart="158" bodyend="160" declfile="include/matchers.h" declline="434" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a0d610018da0d7cd5476f36abe0082fff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::MinArrayLike</definition>
        <argsstring>(int min, const IMatcher::Ptr obj)</argsstring>
        <name>MinArrayLike</name>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>const <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array with minimum size and each element like the template object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum size of the array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="162" column="17" bodyfile="src/matchers.cpp" bodystart="162" bodyend="164" declfile="include/matchers.h" declline="440" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a057f106b274725ca06e1335c0c9da45f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::MinArrayLike</definition>
        <argsstring>(int min, int examples, const IMatcher::Ptr obj)</argsstring>
        <name>MinArrayLike</name>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>examples</declname>
        </param>
        <param>
          <type>const <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array with minimum size and each element like the template object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum size of the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>examples</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of examples to generate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="166" column="17" bodyfile="src/matchers.cpp" bodystart="166" bodyend="168" declfile="include/matchers.h" declline="447" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1aa56a8e2c0bf49cfb794738471b8a5be4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::ConstrainedArrayLike</definition>
        <argsstring>(int min, int max, const IMatcher::Ptr obj)</argsstring>
        <name>ConstrainedArrayLike</name>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <param>
          <type>const <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array with minimum and maximum size and each element like the template object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum size of the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum size of the array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="170" column="17" bodyfile="src/matchers.cpp" bodystart="170" bodyend="172" declfile="include/matchers.h" declline="454" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a8a572f179ab00138064e74ae28bde134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::ConstrainedArrayLike</definition>
        <argsstring>(int min, int max, int examples, const IMatcher::Ptr obj)</argsstring>
        <name>ConstrainedArrayLike</name>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <param>
          <type>int</type>
          <declname>examples</declname>
        </param>
        <param>
          <type>const <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array with minimum and maximum size and each element like the template object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum size of the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum size of the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>examples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of examples to generate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="174" column="17" bodyfile="src/matchers.cpp" bodystart="174" bodyend="176" declfile="include/matchers.h" declline="462" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1afe9e52d692ad1abe7727f08f0dc9a4f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::EqualTo</definition>
        <argsstring>(int value)</argsstring>
        <name>EqualTo</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match by equality. This is mainly used to reset the cascading type matchers. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to match to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="178" column="17" bodyfile="src/matchers.cpp" bodystart="178" bodyend="180" declfile="include/matchers.h" declline="468" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1abdfa9cb6995ab04d829ff6a843d4c69e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::EqualTo</definition>
        <argsstring>(long value)</argsstring>
        <name>EqualTo</name>
        <param>
          <type>long</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match by equality. This is mainly used to reset the cascading type matchers. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to match to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="182" column="17" bodyfile="src/matchers.cpp" bodystart="182" bodyend="184" declfile="include/matchers.h" declline="474" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1aa9e1890dd24fa778e0db53f52df0efb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::EqualTo</definition>
        <argsstring>(float value)</argsstring>
        <name>EqualTo</name>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match by equality. This is mainly used to reset the cascading type matchers. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to match to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="186" column="17" bodyfile="src/matchers.cpp" bodystart="186" bodyend="188" declfile="include/matchers.h" declline="480" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1ab21bb806b113cd85560dd4be1b6badca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::EqualTo</definition>
        <argsstring>(double value)</argsstring>
        <name>EqualTo</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match by equality. This is mainly used to reset the cascading type matchers. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to match to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="190" column="17" bodyfile="src/matchers.cpp" bodystart="190" bodyend="192" declfile="include/matchers.h" declline="486" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1af43a1623b3acd13c56391a276813da5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::EqualTo</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>EqualTo</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match by equality. This is mainly used to reset the cascading type matchers. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to match to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="194" column="17" bodyfile="src/matchers.cpp" bodystart="194" bodyend="196" declfile="include/matchers.h" declline="492" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a9b85916baba1ca1d86d93af79bde5b43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::EqualTo</definition>
        <argsstring>(const char *value)</argsstring>
        <name>EqualTo</name>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match by equality. This is mainly used to reset the cascading type matchers. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to match to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="198" column="17" bodyfile="src/matchers.cpp" bodystart="198" bodyend="200" declfile="include/matchers.h" declline="498" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a1931ffa4a97f768d81bcebf9406592ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::EqualTo</definition>
        <argsstring>(bool value)</argsstring>
        <name>EqualTo</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Match by equality. This is mainly used to reset the cascading type matchers. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to match to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="202" column="17" bodyfile="src/matchers.cpp" bodystart="202" bodyend="204" declfile="include/matchers.h" declline="504" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a4b543ff4c6f35f548d64f82c2f5543b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::IncludesStr</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>IncludesStr</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matches if the string value contains the given value <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>String value that must be present </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="206" column="17" bodyfile="src/matchers.cpp" bodystart="206" bodyend="208" declfile="include/matchers.h" declline="510" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a0713635f17e43e8f4a4973cdb50a7008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::NullValue</definition>
        <argsstring>()</argsstring>
        <name>NullValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matches a JSON null value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="210" column="17" bodyfile="src/matchers.cpp" bodystart="210" bodyend="212" declfile="include/matchers.h" declline="515" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a2c4278f99e116245c369c5bb8788ca43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Url</definition>
        <argsstring>(const std::string &amp;basePath, const std::vector&lt; IMatcher::Ptr &gt; &amp;pathFragments)</argsstring>
        <name>Url</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>basePath</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref> &gt; &amp;</type>
          <declname>pathFragments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matches a URL composed of a base path and a list of path fragments <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>basePath</parametername>
</parameternamelist>
<parameterdescription>
<para>Base path of the URL </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pathFragments</parametername>
</parameternamelist>
<parameterdescription>
<para>list of path fragments, can be regular expressions. Only the Equals and Matching matchers will work. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="214" column="17" bodyfile="src/matchers.cpp" bodystart="214" bodyend="216" declfile="include/matchers.h" declline="522" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1a2cd9b4c8032622e39d8bcf40c3bf1cf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::Url</definition>
        <argsstring>(const std::vector&lt; IMatcher::Ptr &gt; &amp;pathFragments)</argsstring>
        <name>Url</name>
        <param>
          <type>const std::vector&lt; <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref> &gt; &amp;</type>
          <declname>pathFragments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matches a URL composed of a base path and a list of path fragments. The base URL from the mock server will be used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pathFragments</parametername>
</parameternamelist>
<parameterdescription>
<para>list of path fragments, can be regular expressions. Only the Equals and Matching matchers will work. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="218" column="17" bodyfile="src/matchers.cpp" bodystart="218" bodyend="220" declfile="include/matchers.h" declline="528" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacepact__consumer_1_1matchers_1aa072894ea5f3446527b3b4e1642339cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref></type>
        <definition>IMatcher::Ptr pact_consumer::matchers::ArrayContaining</definition>
        <argsstring>(const std::vector&lt; IMatcher::Ptr &gt; &amp;variants)</argsstring>
        <name>ArrayContaining</name>
        <param>
          <type>const std::vector&lt; <ref refid="classpact__consumer_1_1matchers_1_1IMatcher_1a36aa47dbb9f50f5d8432977bc7ae9a5b" kindref="member">IMatcher::Ptr</ref> &gt; &amp;</type>
          <declname>variants</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matches the items in an array against a number of variants. Matching is successful if each variant occurs once in the array. Variants may be objects containing matching rules. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum size of the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum size of the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>examples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of examples to generate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers.cpp" line="222" column="17" bodyfile="src/matchers.cpp" bodystart="222" bodyend="224" declfile="include/matchers.h" declline="537" declcolumn="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/matchers.cpp" line="8" column="1"/>
  </compounddef>
</doxygen>
