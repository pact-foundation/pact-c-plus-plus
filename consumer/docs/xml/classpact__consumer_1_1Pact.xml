<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classpact__consumer_1_1Pact" kind="class" language="C++" prot="public">
    <compoundname>pact_consumer::Pact</compoundname>
    <includes refid="consumer_8h" local="no">consumer.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classpact__consumer_1_1Pact_1a5e142f1242ac87124aa4d8f880bcd4b3" prot="public" static="no" mutable="no">
        <type>PactHandle</type>
        <definition>PactHandle pact_consumer::Pact::pact</definition>
        <argsstring></argsstring>
        <name>pact</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/consumer.h" line="127" column="18" bodyfile="include/consumer.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpact__consumer_1_1Pact_1a2d71145b2d9394a13b2ec104b031cdd2" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string pact_consumer::Pact::pact_directory</definition>
        <argsstring></argsstring>
        <name>pact_directory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Directory to write pact files to </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/consumer.h" line="132" column="19" bodyfile="include/consumer.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpact__consumer_1_1Pact_1a1275784f044dcfd19537c66493037be2" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string pact_consumer::Pact::consumer</definition>
        <argsstring></argsstring>
        <name>consumer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/consumer.h" line="135" column="19" bodyfile="include/consumer.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpact__consumer_1_1Pact_1abd514fa3a02e63d3b5d332674a35ea8c" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string pact_consumer::Pact::provider</definition>
        <argsstring></argsstring>
        <name>provider</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/consumer.h" line="136" column="19" bodyfile="include/consumer.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpact__consumer_1_1Pact_1a907de956f18c074634ceba0980fa8630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pact_consumer::Pact::Pact</definition>
        <argsstring>(const char *consumer, const char *provider)</argsstring>
        <name>Pact</name>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>provider</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs the <ref refid="classpact__consumer_1_1Pact" kindref="compound">Pact</ref> given the consumer and provider names </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/consumer.h" line="104" column="7" bodyfile="src/consumer.cpp" bodystart="20" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classpact__consumer_1_1Pact_1a630248129b4a610fd15d94d08c6fb6f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1Interaction" kindref="compound">Interaction</ref></type>
        <definition>Interaction pact_consumer::Pact::given</definition>
        <argsstring>(const char *provider_state) const</argsstring>
        <name>given</name>
        <param>
          <type>const char *</type>
          <declname>provider_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new iteraction with a defined provider state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/consumer.h" line="109" column="19" bodyfile="src/consumer.cpp" bodystart="30" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classpact__consumer_1_1Pact_1a17fcecc8bc54bf6cc0f4a5eaae31a555" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1Interaction" kindref="compound">Interaction</ref></type>
        <definition>Interaction pact_consumer::Pact::given</definition>
        <argsstring>(const char *provider_state, const std::unordered_map&lt; std::string, std::string &gt; &amp;parameters) const</argsstring>
        <name>given</name>
        <param>
          <type>const char *</type>
          <declname>provider_state</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; std::string, std::string &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new iteraction with a defined provider state and parameters </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/consumer.h" line="114" column="19" bodyfile="src/consumer.cpp" bodystart="34" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classpact__consumer_1_1Pact_1a05713ce4758ee154989b327c686dc18d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1Interaction" kindref="compound">Interaction</ref></type>
        <definition>Interaction pact_consumer::Pact::uponReceiving</definition>
        <argsstring>(const char *description) const</argsstring>
        <name>uponReceiving</name>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new interaction with the provided description. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/consumer.h" line="119" column="19" bodyfile="src/consumer.cpp" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classpact__consumer_1_1Pact_1ab1f98bc36f5865fcc5fb1fbcc20220ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpact__consumer_1_1PactTestResult" kindref="compound">PactTestResult</ref></type>
        <definition>PactTestResult pact_consumer::Pact::run_test</definition>
        <argsstring>(std::function&lt; bool(const MockServerHandle *)&gt; callback) const</argsstring>
        <name>run_test</name>
        <param>
          <type>std::function&lt; bool(const <ref refid="classpact__consumer_1_1MockServerHandle" kindref="compound">MockServerHandle</ref> *)&gt;</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starts a mock server for this pact, and then passes it to the callback. The callback needs to return a boolean value to indicate of the test was successful. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/consumer.h" line="125" column="22" bodyfile="src/consumer.cpp" bodystart="38" bodyend="79"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class that defines a <ref refid="classpact__consumer_1_1Pact" kindref="compound">Pact</ref> between a consumer and provider </para>
    </detaileddescription>
    <location file="include/consumer.h" line="99" column="3" bodyfile="include/consumer.h" bodystart="99" bodyend="137"/>
    <listofallmembers>
      <member refid="classpact__consumer_1_1Pact_1a1275784f044dcfd19537c66493037be2" prot="private" virt="non-virtual"><scope>pact_consumer::Pact</scope><name>consumer</name></member>
      <member refid="classpact__consumer_1_1Pact_1a630248129b4a610fd15d94d08c6fb6f5" prot="public" virt="non-virtual"><scope>pact_consumer::Pact</scope><name>given</name></member>
      <member refid="classpact__consumer_1_1Pact_1a17fcecc8bc54bf6cc0f4a5eaae31a555" prot="public" virt="non-virtual"><scope>pact_consumer::Pact</scope><name>given</name></member>
      <member refid="classpact__consumer_1_1Pact_1a5e142f1242ac87124aa4d8f880bcd4b3" prot="public" virt="non-virtual"><scope>pact_consumer::Pact</scope><name>pact</name></member>
      <member refid="classpact__consumer_1_1Pact_1a907de956f18c074634ceba0980fa8630" prot="public" virt="non-virtual"><scope>pact_consumer::Pact</scope><name>Pact</name></member>
      <member refid="classpact__consumer_1_1Pact_1a2d71145b2d9394a13b2ec104b031cdd2" prot="public" virt="non-virtual"><scope>pact_consumer::Pact</scope><name>pact_directory</name></member>
      <member refid="classpact__consumer_1_1Pact_1abd514fa3a02e63d3b5d332674a35ea8c" prot="private" virt="non-virtual"><scope>pact_consumer::Pact</scope><name>provider</name></member>
      <member refid="classpact__consumer_1_1Pact_1ab1f98bc36f5865fcc5fb1fbcc20220ea" prot="public" virt="non-virtual"><scope>pact_consumer::Pact</scope><name>run_test</name></member>
      <member refid="classpact__consumer_1_1Pact_1a05713ce4758ee154989b327c686dc18d" prot="public" virt="non-virtual"><scope>pact_consumer::Pact</scope><name>uponReceiving</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
