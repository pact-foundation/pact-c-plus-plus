<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classpact__consumer_1_1PactTestResult" kind="class" language="C++" prot="public">
    <compoundname>pact_consumer::PactTestResult</compoundname>
    <includes refid="consumer_8h" local="no">consumer.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpact__consumer_1_1PactTestResult_1a2ae85ba465790a5ff8450fbe0ca2ef9f" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int pact_consumer::PactTestResult::status</definition>
        <argsstring></argsstring>
        <name>status</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/consumer.h" line="91" column="20" bodyfile="include/consumer.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpact__consumer_1_1PactTestResult_1a844caccd5128db3a1ea0221ea305440c" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; pact_consumer::PactTestResult::messages</definition>
        <argsstring></argsstring>
        <name>messages</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/consumer.h" line="92" column="19" bodyfile="include/consumer.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpact__consumer_1_1PactTestResult_1a954272533665437376b199eee901e3d2" prot="private" static="no" mutable="no">
        <type>std::optional&lt; std::string &gt;</type>
        <definition>std::optional&lt;std::string&gt; pact_consumer::PactTestResult::ex</definition>
        <argsstring></argsstring>
        <name>ex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/consumer.h" line="93" column="21" bodyfile="include/consumer.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpact__consumer_1_1PactTestResult_1ad864d8a498509ff5b4bfa25eaf490a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pact_consumer::PactTestResult::PactTestResult</definition>
        <argsstring>()</argsstring>
        <name>PactTestResult</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/consumer.h" line="63" column="7" bodyfile="src/consumer.cpp" bodystart="251" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classpact__consumer_1_1PactTestResult_1a17c49c0a25f96a69b1e37dbdcc0b88ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pact_consumer::PactTestResult::add_state</definition>
        <argsstring>(TestResultState state)</argsstring>
        <name>add_state</name>
        <param>
          <type><ref refid="namespacepact__consumer_1a52ee54250f0c10cc1cb80909bef7b68c" kindref="member">TestResultState</ref></type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a test state to the result </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/consumer.h" line="68" column="12" bodyfile="src/consumer.cpp" bodystart="255" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classpact__consumer_1_1PactTestResult_1a0e60ee0a59c060314b32bdaea6f3e67d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pact_consumer::PactTestResult::add_state</definition>
        <argsstring>(TestResultState state, std::string message)</argsstring>
        <name>add_state</name>
        <param>
          <type><ref refid="namespacepact__consumer_1a52ee54250f0c10cc1cb80909bef7b68c" kindref="member">TestResultState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a test state with a message to the result </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/consumer.h" line="73" column="12" bodyfile="src/consumer.cpp" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classpact__consumer_1_1PactTestResult_1a7df2d4fade24fa975ae88e862de5b673" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pact_consumer::PactTestResult::add_state</definition>
        <argsstring>(TestResultState state, std::string message, std::string ex)</argsstring>
        <name>add_state</name>
        <param>
          <type><ref refid="namespacepact__consumer_1a52ee54250f0c10cc1cb80909bef7b68c" kindref="member">TestResultState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>message</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a test state with a message to the result </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/consumer.h" line="78" column="12" bodyfile="src/consumer.cpp" bodystart="264" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classpact__consumer_1_1PactTestResult_1af52c0d3521914b0398d0bc0d54cbd1a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pact_consumer::PactTestResult::is_ok</definition>
        <argsstring>() const</argsstring>
        <name>is_ok</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If there are no mismatches and the user code did not fail </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/consumer.h" line="83" column="12" bodyfile="src/consumer.cpp" bodystart="270" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classpact__consumer_1_1PactTestResult_1ad559f0f824c26a6fd5f6c6b1fa89932a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pact_consumer::PactTestResult::display_errors</definition>
        <argsstring>()</argsstring>
        <name>display_errors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Logs all errors out </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/consumer.h" line="88" column="12" bodyfile="src/consumer.cpp" bodystart="274" bodyend="361"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Result of the <ref refid="classpact__consumer_1_1Pact" kindref="compound">Pact</ref> test run </para>
    </detaileddescription>
    <location file="include/consumer.h" line="61" column="3" bodyfile="include/consumer.h" bodystart="61" bodyend="94"/>
    <listofallmembers>
      <member refid="classpact__consumer_1_1PactTestResult_1a17c49c0a25f96a69b1e37dbdcc0b88ad" prot="public" virt="non-virtual"><scope>pact_consumer::PactTestResult</scope><name>add_state</name></member>
      <member refid="classpact__consumer_1_1PactTestResult_1a0e60ee0a59c060314b32bdaea6f3e67d" prot="public" virt="non-virtual"><scope>pact_consumer::PactTestResult</scope><name>add_state</name></member>
      <member refid="classpact__consumer_1_1PactTestResult_1a7df2d4fade24fa975ae88e862de5b673" prot="public" virt="non-virtual"><scope>pact_consumer::PactTestResult</scope><name>add_state</name></member>
      <member refid="classpact__consumer_1_1PactTestResult_1ad559f0f824c26a6fd5f6c6b1fa89932a" prot="public" virt="non-virtual"><scope>pact_consumer::PactTestResult</scope><name>display_errors</name></member>
      <member refid="classpact__consumer_1_1PactTestResult_1a954272533665437376b199eee901e3d2" prot="private" virt="non-virtual"><scope>pact_consumer::PactTestResult</scope><name>ex</name></member>
      <member refid="classpact__consumer_1_1PactTestResult_1af52c0d3521914b0398d0bc0d54cbd1a9" prot="public" virt="non-virtual"><scope>pact_consumer::PactTestResult</scope><name>is_ok</name></member>
      <member refid="classpact__consumer_1_1PactTestResult_1a844caccd5128db3a1ea0221ea305440c" prot="private" virt="non-virtual"><scope>pact_consumer::PactTestResult</scope><name>messages</name></member>
      <member refid="classpact__consumer_1_1PactTestResult_1ad864d8a498509ff5b4bfa25eaf490a6c" prot="public" virt="non-virtual"><scope>pact_consumer::PactTestResult</scope><name>PactTestResult</name></member>
      <member refid="classpact__consumer_1_1PactTestResult_1a2ae85ba465790a5ff8450fbe0ca2ef9f" prot="private" virt="non-virtual"><scope>pact_consumer::PactTestResult</scope><name>status</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
